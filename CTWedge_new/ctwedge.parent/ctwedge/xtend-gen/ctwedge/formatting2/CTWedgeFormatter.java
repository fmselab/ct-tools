/**
 * generated by Xtext 2.34.0
 */
package ctwedge.formatting2;

import com.google.inject.Inject;
import ctwedge.ctWedge.CitModel;
import ctwedge.ctWedge.Constraint;
import ctwedge.ctWedge.Parameter;
import ctwedge.services.CTWedgeGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class CTWedgeFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CTWedgeGrammarAccess _cTWedgeGrammarAccess;

  protected void _format(final CitModel citModel, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = citModel.getParameters();
    for (final Parameter parameter : _parameters) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Parameter>prepend(parameter, _function);
        document.<Parameter>format(parameter);
      }
    }
    EList<Constraint> _constraints = citModel.getConstraints();
    for (final Constraint constraint : _constraints) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Constraint>prepend(constraint, _function);
        document.<Constraint>format(constraint);
      }
    }
  }

  public void format(final Object citModel, final IFormattableDocument document) {
    if (citModel instanceof XtextResource) {
      _format((XtextResource)citModel, document);
      return;
    } else if (citModel instanceof CitModel) {
      _format((CitModel)citModel, document);
      return;
    } else if (citModel instanceof EObject) {
      _format((EObject)citModel, document);
      return;
    } else if (citModel == null) {
      _format((Void)null, document);
      return;
    } else if (citModel != null) {
      _format(citModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(citModel, document).toString());
    }
  }
}
