/*
 * generated by Xtext 2.34.0
 */
grammar InternalCTWedge;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ctwedge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ctwedge.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ctwedge.services.CTWedgeGrammarAccess;

}

@parser::members {

 	private CTWedgeGrammarAccess grammarAccess;

    public InternalCTWedgeParser(TokenStream input, CTWedgeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CitModel";
   	}

   	@Override
   	protected CTWedgeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCitModel
entryRuleCitModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCitModelRule()); }
	iv_ruleCitModel=ruleCitModel
	{ $current=$iv_ruleCitModel.current; }
	EOF;

// Rule CitModel
ruleCitModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCitModelAccess().getCitModelAction_0(),
					$current);
			}
		)
		otherlv_1='Model'
		{
			newLeafNode(otherlv_1, grammarAccess.getCitModelAccess().getModelKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCitModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='Parameters'
		{
			newLeafNode(otherlv_3, grammarAccess.getCitModelAccess().getParametersKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getCitModelAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_5_0());
				}
				lv_parameters_5_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCitModelRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_5_0,
						"ctwedge.CTWedge.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_6='Constraints'
			{
				newLeafNode(otherlv_6, grammarAccess.getCitModelAccess().getConstraintsKeyword_6_0());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getCitModelAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCitModelAccess().getConstraintsConstraintParserRuleCall_6_2_0());
					}
					lv_constraints_8_0=ruleConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCitModelRule());
						}
						add(
							$current,
							"constraints",
							lv_constraints_8_0,
							"ctwedge.CTWedge.Constraint");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterAccess().getBoolParserRuleCall_0_0());
			}
			this_Bool_0=ruleBool
			{
				$current = $this_Bool_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0_1());
			}
			this_Enumerative_1=ruleEnumerative
			{
				$current = $this_Enumerative_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getParameterAccess().getRangeParserRuleCall_0_2());
			}
			this_Range_2=ruleRange
			{
				$current = $this_Range_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getSemicolonKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBoolAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolAccess().getColonKeyword_1());
		}
		(
			otherlv_2='Boolean'
			{
				newLeafNode(otherlv_2, grammarAccess.getBoolAccess().getBooleanKeyword_2_0());
			}
			    |
			(
				otherlv_3='{'
				{
					newLeafNode(otherlv_3, grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_1_0());
				}
				otherlv_4='TRUE'
				{
					newLeafNode(otherlv_4, grammarAccess.getBoolAccess().getTRUEKeyword_2_1_1());
				}
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getBoolAccess().getCommaKeyword_2_1_2());
					}
				)?
				otherlv_6='FALSE'
				{
					newLeafNode(otherlv_6, grammarAccess.getBoolAccess().getFALSEKeyword_2_1_3());
				}
				otherlv_7='}'
				{
					newLeafNode(otherlv_7, grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_1_4());
				}
			)
			    |
			(
				otherlv_8='{'
				{
					newLeafNode(otherlv_8, grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_2_0());
				}
				otherlv_9='FALSE'
				{
					newLeafNode(otherlv_9, grammarAccess.getBoolAccess().getFALSEKeyword_2_2_1());
				}
				(
					otherlv_10=','
					{
						newLeafNode(otherlv_10, grammarAccess.getBoolAccess().getCommaKeyword_2_2_2());
					}
				)?
				otherlv_11='TRUE'
				{
					newLeafNode(otherlv_11, grammarAccess.getBoolAccess().getTRUEKeyword_2_2_3());
				}
				otherlv_12='}'
				{
					newLeafNode(otherlv_12, grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_2_4());
				}
			)
			    |
			(
				otherlv_13='{'
				{
					newLeafNode(otherlv_13, grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_3_0());
				}
				otherlv_14='true'
				{
					newLeafNode(otherlv_14, grammarAccess.getBoolAccess().getTrueKeyword_2_3_1());
				}
				(
					otherlv_15=','
					{
						newLeafNode(otherlv_15, grammarAccess.getBoolAccess().getCommaKeyword_2_3_2());
					}
				)?
				otherlv_16='false'
				{
					newLeafNode(otherlv_16, grammarAccess.getBoolAccess().getFalseKeyword_2_3_3());
				}
				otherlv_17='}'
				{
					newLeafNode(otherlv_17, grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_3_4());
				}
			)
			    |
			(
				otherlv_18='{'
				{
					newLeafNode(otherlv_18, grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_4_0());
				}
				otherlv_19='false'
				{
					newLeafNode(otherlv_19, grammarAccess.getBoolAccess().getFalseKeyword_2_4_1());
				}
				(
					otherlv_20=','
					{
						newLeafNode(otherlv_20, grammarAccess.getBoolAccess().getCommaKeyword_2_4_2());
					}
				)?
				otherlv_21='true'
				{
					newLeafNode(otherlv_21, grammarAccess.getBoolAccess().getTrueKeyword_2_4_3());
				}
				otherlv_22='}'
				{
					newLeafNode(otherlv_22, grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_4_4());
				}
			)
		)
	)
;

// Entry rule entryRuleEnumerative
entryRuleEnumerative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerativeRule()); }
	iv_ruleEnumerative=ruleEnumerative
	{ $current=$iv_ruleEnumerative.current; }
	EOF;

// Rule Enumerative
ruleEnumerative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerativeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getEnumerativeAccess().getColonKeyword_1_0());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_2_0());
					}
					lv_elements_3_0=ruleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerativeRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"ctwedge.CTWedge.Element");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getEnumerativeAccess().getCommaKeyword_1_3_0());
					}
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_3_1_0());
						}
						lv_elements_5_0=ruleElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumerativeRule());
							}
							add(
								$current,
								"elements",
								lv_elements_5_0,
								"ctwedge.CTWedge.Element");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0());
			}
			lv_name_0_0=ruleelementID
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"ctwedge.CTWedge.elementID");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getColonKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0());
				}
				lv_begin_3_0=rulePossiblySignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"begin",
						lv_begin_3_0,
						"ctwedge.CTWedge.PossiblySignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='..'
		{
			newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0());
				}
				lv_end_5_0=rulePossiblySignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"end",
						lv_end_5_0,
						"ctwedge.CTWedge.PossiblySignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6());
		}
		(
			otherlv_7='step'
			{
				newLeafNode(otherlv_7, grammarAccess.getRangeAccess().getStepKeyword_7_0());
			}
			(
				(
					lv_step_8_0=RULE_INT
					{
						newLeafNode(lv_step_8_0, grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRangeRule());
						}
						setWithLastConsumed(
							$current,
							"step",
							lv_step_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getNumberSignKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getConstraintAccess().getImpliesExpressionParserRuleCall_1());
		}
		this_ImpliesExpression_1=ruleImpliesExpression
		{
			$current = $this_ImpliesExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='#'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getNumberSignKeyword_2());
		}
	)
;

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	iv_ruleImpliesExpression=ruleImpliesExpression
	{ $current=$iv_ruleImpliesExpression.current; }
	EOF;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImpliesExpressionAccess().getOrExpressionParserRuleCall_0());
		}
		this_OrExpression_0=ruleOrExpression
		{
			$current = $this_OrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleImpliesOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"ctwedge.CTWedge.ImpliesOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.OrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getOrExpressionAccess().getOR_OPERATORParserRuleCall_1_1());
			}
			ruleOR_OPERATOR
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0());
		}
		this_EqualExpression_0=ruleEqualExpression
		{
			$current = $this_EqualExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getAndExpressionAccess().getAND_OPERATORParserRuleCall_1_1());
			}
			ruleAND_OPERATOR
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.EqualExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualExpression
entryRuleEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualExpressionRule()); }
	iv_ruleEqualExpression=ruleEqualExpression
	{ $current=$iv_ruleEqualExpression.current; }
	EOF;

// Rule EqualExpression
ruleEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualExpressionAccess().getRelationalExpressionParserRuleCall_0());
		}
		this_RelationalExpression_0=ruleRelationalExpression
		{
			$current = $this_RelationalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualExpressionAccess().getOpEqualityOperatorsEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleEqualityOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"ctwedge.CTWedge.EqualityOperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getPlusMinusParserRuleCall_0());
		}
		this_PlusMinus_0=rulePlusMinus
		{
			$current = $this_PlusMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleRelationalOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"ctwedge.CTWedge.RelationalOperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.PlusMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); }
	iv_rulePlusMinus=rulePlusMinus
	{ $current=$iv_rulePlusMinus.current; }
	EOF;

// Rule PlusMinus
rulePlusMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0());
		}
		this_ModMultDiv_0=ruleModMultDiv
		{
			$current = $this_ModMultDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0());
					}
					lv_op_2_0=rulePlusMinusOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusMinusRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"ctwedge.CTWedge.PlusMinusOperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleModMultDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.ModMultDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModMultDiv
entryRuleModMultDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModMultDivRule()); }
	iv_ruleModMultDiv=ruleModMultDiv
	{ $current=$iv_ruleModMultDiv.current; }
	EOF;

// Rule ModMultDiv
ruleModMultDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModMultDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleModMultDivOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModMultDivRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"ctwedge.CTWedge.ModMultDivOperators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModMultDivAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModMultDivRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ctwedge.CTWedge.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0());
		}
		this_NotExpression_0=ruleNotExpression
		{
			$current = $this_NotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getImpliesExpressionParserRuleCall_1_1());
			}
			this_ImpliesExpression_2=ruleImpliesExpression
			{
				$current = $this_ImpliesExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2());
		}
		this_AtomicPredicate_4=ruleAtomicPredicate
		{
			$current = $this_AtomicPredicate_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNotExpressionAccess().getNOT_OPERATORParserRuleCall_0());
		}
		ruleNOT_OPERATOR
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1());
		}
		this_Primary_1=rulePrimary
		{
			$current = $this_Primary_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			{
				$current = forceCreateModelElementAndSet(
					grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleAtomicPredicate
entryRuleAtomicPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicPredicateRule()); }
	iv_ruleAtomicPredicate=ruleAtomicPredicate
	{ $current=$iv_ruleAtomicPredicate.current; }
	EOF;

// Rule AtomicPredicate
ruleAtomicPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicPredicateAccess().getBoolConstBoolConstParserRuleCall_0_0());
				}
				lv_boolConst_0_0=ruleBoolConst
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomicPredicateRule());
					}
					set(
						$current,
						"boolConst",
						lv_boolConst_0_0,
						"ctwedge.CTWedge.BoolConst");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicPredicateAccess().getNameElementIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleelementID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAtomicPredicateRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ctwedge.CTWedge.elementID");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOR_OPERATOR
entryRuleOR_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOR_OPERATORRule()); }
	iv_ruleOR_OPERATOR=ruleOR_OPERATOR
	{ $current=$iv_ruleOR_OPERATOR.current.getText(); }
	EOF;

// Rule OR_OPERATOR
ruleOR_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOR_OPERATORAccess().getVerticalLineVerticalLineKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOR_OPERATORAccess().getOrKeyword_1());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOR_OPERATORAccess().getORKeyword_2());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOR_OPERATORAccess().getVerticalLineKeyword_3());
		}
	)
;

// Entry rule entryRuleAND_OPERATOR
entryRuleAND_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAND_OPERATORRule()); }
	iv_ruleAND_OPERATOR=ruleAND_OPERATOR
	{ $current=$iv_ruleAND_OPERATOR.current.getText(); }
	EOF;

// Rule AND_OPERATOR
ruleAND_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getAndKeyword_1());
		}
		    |
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getANDKeyword_2());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getAmpersandKeyword_3());
		}
	)
;

// Entry rule entryRuleNOT_OPERATOR
entryRuleNOT_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNOT_OPERATORRule()); }
	iv_ruleNOT_OPERATOR=ruleNOT_OPERATOR
	{ $current=$iv_ruleNOT_OPERATOR.current.getText(); }
	EOF;

// Rule NOT_OPERATOR
ruleNOT_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNOT_OPERATORAccess().getExclamationMarkKeyword_0());
		}
		    |
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNOT_OPERATORAccess().getNotKeyword_1());
		}
		    |
		kw='NOT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNOT_OPERATORAccess().getNOTKeyword_2());
		}
	)
;

// Entry rule entryRuleBoolConst
entryRuleBoolConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolConstRule()); }
	iv_ruleBoolConst=ruleBoolConst
	{ $current=$iv_ruleBoolConst.current.getText(); }
	EOF;

// Rule BoolConst
ruleBoolConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getFalseKeyword_0());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getTrueKeyword_1());
		}
		    |
		kw='FALSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getFALSEKeyword_2());
		}
		    |
		kw='TRUE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getTRUEKeyword_3());
		}
	)
;

// Entry rule entryRuleelementID
entryRuleelementID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementIDRule()); }
	iv_ruleelementID=ruleelementID
	{ $current=$iv_ruleelementID.current.getText(); }
	EOF;

// Rule elementID
ruleelementID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_NUMID_1=RULE_NUMID
		{
			$current.merge(this_NUMID_1);
		}
		{
			newLeafNode(this_NUMID_1, grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1());
		}
		    |
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getElementIDAccess().getSTRINGTerminalRuleCall_2());
		}
		    |
		(
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getElementIDAccess().getHyphenMinusKeyword_3_0());
				}
			)?
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getElementIDAccess().getINTTerminalRuleCall_3_1());
			}
		)
	)
;

// Entry rule entryRulePossiblySignedNumber
entryRulePossiblySignedNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPossiblySignedNumberRule()); }
	iv_rulePossiblySignedNumber=rulePossiblySignedNumber
	{ $current=$iv_rulePossiblySignedNumber.current.getText(); }
	EOF;

// Rule PossiblySignedNumber
rulePossiblySignedNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule RelationalOperators
ruleRelationalOperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule EqualityOperators
ruleEqualityOperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getEqualityOperatorsAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorsAccess().getNEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='='
			{
				$current = grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule PlusMinusOperators
rulePlusMinusOperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ModMultDivOperators
ruleModMultDivOperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='%'
			{
				$current = grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='*'
			{
				$current = grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='/'
			{
				$current = grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ImpliesOperator
ruleImpliesOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=>'
			{
				$current = grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<=>'
			{
				$current = grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='->'
			{
				$current = grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<->'
			{
				$current = grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_NUMID : ('0'..'9')+ RULE_ID;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
