/**
 * generated by Xtext 2.34.0
 */
package ctwedge.ctWedge.impl;

import ctwedge.ctWedge.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CtWedgeFactoryImpl extends EFactoryImpl implements CtWedgeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CtWedgeFactory init()
  {
    try
    {
      CtWedgeFactory theCtWedgeFactory = (CtWedgeFactory)EPackage.Registry.INSTANCE.getEFactory(CtWedgePackage.eNS_URI);
      if (theCtWedgeFactory != null)
      {
        return theCtWedgeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CtWedgeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CtWedgeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CtWedgePackage.CIT_MODEL: return createCitModel();
      case CtWedgePackage.PARAMETER: return createParameter();
      case CtWedgePackage.BOOL: return createBool();
      case CtWedgePackage.ENUMERATIVE: return createEnumerative();
      case CtWedgePackage.ELEMENT: return createElement();
      case CtWedgePackage.RANGE: return createRange();
      case CtWedgePackage.CONSTRAINT: return createConstraint();
      case CtWedgePackage.EXPRESSION: return createExpression();
      case CtWedgePackage.ATOMIC_PREDICATE: return createAtomicPredicate();
      case CtWedgePackage.IMPLIES_EXPRESSION: return createImpliesExpression();
      case CtWedgePackage.OR_EXPRESSION: return createOrExpression();
      case CtWedgePackage.AND_EXPRESSION: return createAndExpression();
      case CtWedgePackage.EQUAL_EXPRESSION: return createEqualExpression();
      case CtWedgePackage.RELATIONAL_EXPRESSION: return createRelationalExpression();
      case CtWedgePackage.PLUS_MINUS: return createPlusMinus();
      case CtWedgePackage.MOD_MULT_DIV: return createModMultDiv();
      case CtWedgePackage.NOT_EXPRESSION: return createNotExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CtWedgePackage.OPERATORS:
        return createOperatorsFromString(eDataType, initialValue);
      case CtWedgePackage.PLUS_MINUS_OPERATORS:
        return createPlusMinusOperatorsFromString(eDataType, initialValue);
      case CtWedgePackage.MOD_MULT_DIV_OPERATORS:
        return createModMultDivOperatorsFromString(eDataType, initialValue);
      case CtWedgePackage.IMPLIES_OPERATOR:
        return createImpliesOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CtWedgePackage.OPERATORS:
        return convertOperatorsToString(eDataType, instanceValue);
      case CtWedgePackage.PLUS_MINUS_OPERATORS:
        return convertPlusMinusOperatorsToString(eDataType, instanceValue);
      case CtWedgePackage.MOD_MULT_DIV_OPERATORS:
        return convertModMultDivOperatorsToString(eDataType, instanceValue);
      case CtWedgePackage.IMPLIES_OPERATOR:
        return convertImpliesOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CitModel createCitModel()
  {
    CitModelImpl citModel = new CitModelImpl();
    return citModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool createBool()
  {
    BoolImpl bool = new BoolImpl();
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumerative createEnumerative()
  {
    EnumerativeImpl enumerative = new EnumerativeImpl();
    return enumerative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AtomicPredicate createAtomicPredicate()
  {
    AtomicPredicateImpl atomicPredicate = new AtomicPredicateImpl();
    return atomicPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImpliesExpression createImpliesExpression()
  {
    ImpliesExpressionImpl impliesExpression = new ImpliesExpressionImpl();
    return impliesExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualExpression createEqualExpression()
  {
    EqualExpressionImpl equalExpression = new EqualExpressionImpl();
    return equalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalExpression createRelationalExpression()
  {
    RelationalExpressionImpl relationalExpression = new RelationalExpressionImpl();
    return relationalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusMinus createPlusMinus()
  {
    PlusMinusImpl plusMinus = new PlusMinusImpl();
    return plusMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModMultDiv createModMultDiv()
  {
    ModMultDivImpl modMultDiv = new ModMultDivImpl();
    return modMultDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operators createOperatorsFromString(EDataType eDataType, String initialValue)
  {
    Operators result = Operators.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperatorsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlusMinusOperators createPlusMinusOperatorsFromString(EDataType eDataType, String initialValue)
  {
    PlusMinusOperators result = PlusMinusOperators.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPlusMinusOperatorsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModMultDivOperators createModMultDivOperatorsFromString(EDataType eDataType, String initialValue)
  {
    ModMultDivOperators result = ModMultDivOperators.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertModMultDivOperatorsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImpliesOperator createImpliesOperatorFromString(EDataType eDataType, String initialValue)
  {
    ImpliesOperator result = ImpliesOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImpliesOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CtWedgePackage getCtWedgePackage()
  {
    return (CtWedgePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CtWedgePackage getPackage()
  {
    return CtWedgePackage.eINSTANCE;
  }

} //CtWedgeFactoryImpl
