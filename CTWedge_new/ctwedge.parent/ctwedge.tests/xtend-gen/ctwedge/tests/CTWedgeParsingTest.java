/**
 * generated by Xtext 2.34.0
 */
package ctwedge.tests;

import com.google.inject.Inject;
import ctwedge.ctWedge.CitModel;
import ctwedge.ctWedge.Enumerative;
import ctwedge.ctWedge.Parameter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(CTWedgeInjectorProvider.class)
@SuppressWarnings("all")
public class CTWedgeParsingTest {
  @Inject
  private ParseHelper<CitModel> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("* This is an example model");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Model Phone");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("Parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("emailViewer : Boolean");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("textLines:  [ 25 .. 30 ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("display : {16MC, 8MC, BW}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("Constraints:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("# emailViewer => textLines > 28 #");
      _builder.newLine();
      final CitModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void EnumComma() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model Phone Parameters:  display : {16MC, 8MC, BW}");
      CitModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
      Parameter _get = result.getParameters().get(0);
      Assert.assertEquals(3, ((Enumerative) _get).getElements().size());
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Model Phone Parameters:  display : {16MC 8MC BW}");
      result = this.parseHelper.parse(_builder_2);
      Assert.assertNotNull(result);
      errors = result.eResource().getErrors();
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_3.toString(), errors.isEmpty());
      Parameter _get_1 = result.getParameters().get(0);
      Assert.assertEquals(3, ((Enumerative) _get_1).getElements().size());
      StringConcatenation _builder_4 = new StringConcatenation();
      _builder_4.append("Model Phone Parameters:  display : {16MC, 8MC BW}");
      result = this.parseHelper.parse(_builder_4);
      Assert.assertNotNull(result);
      errors = result.eResource().getErrors();
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_5.toString(), errors.isEmpty());
      Parameter _get_2 = result.getParameters().get(0);
      Assert.assertEquals(3, ((Enumerative) _get_2).getElements().size());
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("Model Phone Parameters:  display : {16MC, , 8MC BW}");
      result = this.parseHelper.parse(_builder_6);
      Assert.assertNotNull(result);
      errors = result.eResource().getErrors();
      Assert.assertFalse(errors.isEmpty());
      InputOutput.<String>println(IterableExtensions.join(errors, ", "));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void EnumWithEmpty() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model Phone Parameters:  display : {16MC, 8MC, BW, }");
      CitModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      Assert.assertFalse(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void EnumWithBoolean() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model Phone Parameters:  display : {TRUE, FALSE}");
      CitModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      Assert.assertTrue(errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModelBoolean() {
    this.loadModelBooleanConstraint("A = B");
    this.loadModelBooleanConstraint("A == B");
    this.loadModelBooleanConstraint("A <=> B");
    this.loadModelBooleanConstraint("A = TRUE");
    this.loadModelBooleanConstraint("A=TRUE");
  }

  public void loadModelBooleanConstraint(final String s) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("* This is an example model");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Model Phone");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("Parameters:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("A : Boolean");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("B : Boolean");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("Constraints:");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t   ");
      _builder.append("# ");
      String _plus = (_builder.toString() + s);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(" ");
      _builder_1.append("#");
      _builder_1.newLine();
      String _plus_1 = (_plus + _builder_1);
      final CitModel result = this.parseHelper.parse(_plus_1);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_2.toString(), errors.isEmpty());
      final CitModel model = ((CitModel) result);
      Assert.assertNotNull(model);
      Assert.assertEquals(1, model.getConstraints().size());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
