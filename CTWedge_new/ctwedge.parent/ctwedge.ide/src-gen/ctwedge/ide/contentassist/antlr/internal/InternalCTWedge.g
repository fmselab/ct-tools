/*
 * generated by Xtext 2.34.0
 */
grammar InternalCTWedge;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ctwedge.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ctwedge.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ctwedge.services.CTWedgeGrammarAccess;

}
@parser::members {
	private CTWedgeGrammarAccess grammarAccess;

	public void setGrammarAccess(CTWedgeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCitModel
entryRuleCitModel
:
{ before(grammarAccess.getCitModelRule()); }
	 ruleCitModel
{ after(grammarAccess.getCitModelRule()); } 
	 EOF 
;

// Rule CitModel
ruleCitModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCitModelAccess().getGroup()); }
		(rule__CitModel__Group__0)
		{ after(grammarAccess.getCitModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBool
entryRuleBool
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolAccess().getGroup()); }
		(rule__Bool__Group__0)
		{ after(grammarAccess.getBoolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerative
entryRuleEnumerative
:
{ before(grammarAccess.getEnumerativeRule()); }
	 ruleEnumerative
{ after(grammarAccess.getEnumerativeRule()); } 
	 EOF 
;

// Rule Enumerative
ruleEnumerative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerativeAccess().getGroup()); }
		(rule__Enumerative__Group__0)
		{ after(grammarAccess.getEnumerativeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getNameAssignment()); }
		(rule__Element__NameAssignment)
		{ after(grammarAccess.getElementAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRange
entryRuleRange
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeAccess().getGroup()); }
		(rule__Range__Group__0)
		{ after(grammarAccess.getRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
		(rule__ImpliesExpression__Group__0)
		{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualExpression
entryRuleEqualExpression
:
{ before(grammarAccess.getEqualExpressionRule()); }
	 ruleEqualExpression
{ after(grammarAccess.getEqualExpressionRule()); } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualExpressionAccess().getGroup()); }
		(rule__EqualExpression__Group__0)
		{ after(grammarAccess.getEqualExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
		(rule__RelationalExpression__Group__0)
		{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusMinus
entryRulePlusMinus
:
{ before(grammarAccess.getPlusMinusRule()); }
	 rulePlusMinus
{ after(grammarAccess.getPlusMinusRule()); } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup()); }
		(rule__PlusMinus__Group__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModMultDiv
entryRuleModMultDiv
:
{ before(grammarAccess.getModMultDivRule()); }
	 ruleModMultDiv
{ after(grammarAccess.getModMultDivRule()); } 
	 EOF 
;

// Rule ModMultDiv
ruleModMultDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModMultDivAccess().getGroup()); }
		(rule__ModMultDiv__Group__0)
		{ after(grammarAccess.getModMultDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotExpression
entryRuleNotExpression
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
		(rule__NotExpression__Group__0)
		{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicPredicate
entryRuleAtomicPredicate
:
{ before(grammarAccess.getAtomicPredicateRule()); }
	 ruleAtomicPredicate
{ after(grammarAccess.getAtomicPredicateRule()); } 
	 EOF 
;

// Rule AtomicPredicate
ruleAtomicPredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicPredicateAccess().getAlternatives()); }
		(rule__AtomicPredicate__Alternatives)
		{ after(grammarAccess.getAtomicPredicateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOR_OPERATOR
entryRuleOR_OPERATOR
:
{ before(grammarAccess.getOR_OPERATORRule()); }
	 ruleOR_OPERATOR
{ after(grammarAccess.getOR_OPERATORRule()); } 
	 EOF 
;

// Rule OR_OPERATOR
ruleOR_OPERATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOR_OPERATORAccess().getAlternatives()); }
		(rule__OR_OPERATOR__Alternatives)
		{ after(grammarAccess.getOR_OPERATORAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAND_OPERATOR
entryRuleAND_OPERATOR
:
{ before(grammarAccess.getAND_OPERATORRule()); }
	 ruleAND_OPERATOR
{ after(grammarAccess.getAND_OPERATORRule()); } 
	 EOF 
;

// Rule AND_OPERATOR
ruleAND_OPERATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAlternatives()); }
		(rule__AND_OPERATOR__Alternatives)
		{ after(grammarAccess.getAND_OPERATORAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNOT_OPERATOR
entryRuleNOT_OPERATOR
:
{ before(grammarAccess.getNOT_OPERATORRule()); }
	 ruleNOT_OPERATOR
{ after(grammarAccess.getNOT_OPERATORRule()); } 
	 EOF 
;

// Rule NOT_OPERATOR
ruleNOT_OPERATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNOT_OPERATORAccess().getAlternatives()); }
		(rule__NOT_OPERATOR__Alternatives)
		{ after(grammarAccess.getNOT_OPERATORAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolConst
entryRuleBoolConst
:
{ before(grammarAccess.getBoolConstRule()); }
	 ruleBoolConst
{ after(grammarAccess.getBoolConstRule()); } 
	 EOF 
;

// Rule BoolConst
ruleBoolConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolConstAccess().getAlternatives()); }
		(rule__BoolConst__Alternatives)
		{ after(grammarAccess.getBoolConstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleelementID
entryRuleelementID
:
{ before(grammarAccess.getElementIDRule()); }
	 ruleelementID
{ after(grammarAccess.getElementIDRule()); } 
	 EOF 
;

// Rule elementID
ruleelementID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementIDAccess().getAlternatives()); }
		(rule__ElementID__Alternatives)
		{ after(grammarAccess.getElementIDAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePossiblySignedNumber
entryRulePossiblySignedNumber
:
{ before(grammarAccess.getPossiblySignedNumberRule()); }
	 rulePossiblySignedNumber
{ after(grammarAccess.getPossiblySignedNumberRule()); } 
	 EOF 
;

// Rule PossiblySignedNumber
rulePossiblySignedNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPossiblySignedNumberAccess().getGroup()); }
		(rule__PossiblySignedNumber__Group__0)
		{ after(grammarAccess.getPossiblySignedNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationalOperators
ruleRelationalOperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorsAccess().getAlternatives()); }
		(rule__RelationalOperators__Alternatives)
		{ after(grammarAccess.getRelationalOperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EqualityOperators
ruleEqualityOperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityOperatorsAccess().getAlternatives()); }
		(rule__EqualityOperators__Alternatives)
		{ after(grammarAccess.getEqualityOperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PlusMinusOperators
rulePlusMinusOperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives()); }
		(rule__PlusMinusOperators__Alternatives)
		{ after(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ModMultDivOperators
ruleModMultDivOperators
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModMultDivOperatorsAccess().getAlternatives()); }
		(rule__ModMultDivOperators__Alternatives)
		{ after(grammarAccess.getModMultDivOperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ImpliesOperator
ruleImpliesOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getAlternatives()); }
		(rule__ImpliesOperator__Alternatives)
		{ after(grammarAccess.getImpliesOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getBoolParserRuleCall_0_0()); }
		ruleBool
		{ after(grammarAccess.getParameterAccess().getBoolParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0_1()); }
		ruleEnumerative
		{ after(grammarAccess.getParameterAccess().getEnumerativeParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getRangeParserRuleCall_0_2()); }
		ruleRange
		{ after(grammarAccess.getParameterAccess().getRangeParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolAccess().getBooleanKeyword_2_0()); }
		'Boolean'
		{ after(grammarAccess.getBoolAccess().getBooleanKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolAccess().getGroup_2_1()); }
		(rule__Bool__Group_2_1__0)
		{ after(grammarAccess.getBoolAccess().getGroup_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolAccess().getGroup_2_2()); }
		(rule__Bool__Group_2_2__0)
		{ after(grammarAccess.getBoolAccess().getGroup_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getBoolAccess().getGroup_2_3()); }
		(rule__Bool__Group_2_3__0)
		{ after(grammarAccess.getBoolAccess().getGroup_2_3()); }
	)
	|
	(
		{ before(grammarAccess.getBoolAccess().getGroup_2_4()); }
		(rule__Bool__Group_2_4__0)
		{ after(grammarAccess.getBoolAccess().getGroup_2_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0()); }
		ruleNotExpression
		{ after(grammarAccess.getPrimaryAccess().getNotExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2()); }
		ruleAtomicPredicate
		{ after(grammarAccess.getPrimaryAccess().getAtomicPredicateParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicPredicate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicPredicateAccess().getBoolConstAssignment_0()); }
		(rule__AtomicPredicate__BoolConstAssignment_0)
		{ after(grammarAccess.getAtomicPredicateAccess().getBoolConstAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicPredicateAccess().getNameAssignment_1()); }
		(rule__AtomicPredicate__NameAssignment_1)
		{ after(grammarAccess.getAtomicPredicateAccess().getNameAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OR_OPERATOR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOR_OPERATORAccess().getVerticalLineVerticalLineKeyword_0()); }
		'||'
		{ after(grammarAccess.getOR_OPERATORAccess().getVerticalLineVerticalLineKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOR_OPERATORAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getOR_OPERATORAccess().getOrKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOR_OPERATORAccess().getORKeyword_2()); }
		'OR'
		{ after(grammarAccess.getOR_OPERATORAccess().getORKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOR_OPERATORAccess().getVerticalLineKeyword_3()); }
		'|'
		{ after(grammarAccess.getOR_OPERATORAccess().getVerticalLineKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AND_OPERATOR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0()); }
		'&&'
		{ after(grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAndKeyword_1()); }
		'and'
		{ after(grammarAccess.getAND_OPERATORAccess().getAndKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getANDKeyword_2()); }
		'AND'
		{ after(grammarAccess.getAND_OPERATORAccess().getANDKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAmpersandKeyword_3()); }
		'&'
		{ after(grammarAccess.getAND_OPERATORAccess().getAmpersandKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NOT_OPERATOR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNOT_OPERATORAccess().getExclamationMarkKeyword_0()); }
		'!'
		{ after(grammarAccess.getNOT_OPERATORAccess().getExclamationMarkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNOT_OPERATORAccess().getNotKeyword_1()); }
		'not'
		{ after(grammarAccess.getNOT_OPERATORAccess().getNotKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getNOT_OPERATORAccess().getNOTKeyword_2()); }
		'NOT'
		{ after(grammarAccess.getNOT_OPERATORAccess().getNOTKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstAccess().getFalseKeyword_0()); }
		'false'
		{ after(grammarAccess.getBoolConstAccess().getFalseKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getTrueKeyword_1()); }
		'true'
		{ after(grammarAccess.getBoolConstAccess().getTrueKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getFALSEKeyword_2()); }
		'FALSE'
		{ after(grammarAccess.getBoolConstAccess().getFALSEKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getTRUEKeyword_3()); }
		'TRUE'
		{ after(grammarAccess.getBoolConstAccess().getTRUEKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementID__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getElementIDAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1()); }
		RULE_NUMID
		{ after(grammarAccess.getElementIDAccess().getNUMIDTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementIDAccess().getSTRINGTerminalRuleCall_2()); }
		RULE_STRING
		{ after(grammarAccess.getElementIDAccess().getSTRINGTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementIDAccess().getGroup_3()); }
		(rule__ElementID__Group_3__0)
		{ after(grammarAccess.getElementIDAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getRelationalOperatorsAccess().getGTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
		('<')
		{ after(grammarAccess.getRelationalOperatorsAccess().getLTEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
		('>=')
		{ after(grammarAccess.getRelationalOperatorsAccess().getGEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
		('<=')
		{ after(grammarAccess.getRelationalOperatorsAccess().getLEEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityOperatorsAccess().getNEEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getEqualityOperatorsAccess().getNEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getEqualityOperatorsAccess().getEQEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getPlusMinusOperatorsAccess().getPlusEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getPlusMinusOperatorsAccess().getMinusEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDivOperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0()); }
		('%')
		{ after(grammarAccess.getModMultDivOperatorsAccess().getModEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1()); }
		('*')
		{ after(grammarAccess.getModMultDivOperatorsAccess().getMultEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2()); }
		('/')
		{ after(grammarAccess.getModMultDivOperatorsAccess().getDivEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0()); }
		('=>')
		{ after(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1()); }
		('<=>')
		{ after(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_2()); }
		('->')
		{ after(grammarAccess.getImpliesOperatorAccess().getImplEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_3()); }
		('<->')
		{ after(grammarAccess.getImpliesOperatorAccess().getIffEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__0__Impl
	rule__CitModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getCitModelAction_0()); }
	()
	{ after(grammarAccess.getCitModelAccess().getCitModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__1__Impl
	rule__CitModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getModelKeyword_1()); }
	'Model'
	{ after(grammarAccess.getCitModelAccess().getModelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__2__Impl
	rule__CitModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getNameAssignment_2()); }
	(rule__CitModel__NameAssignment_2)
	{ after(grammarAccess.getCitModelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__3__Impl
	rule__CitModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getParametersKeyword_3()); }
	'Parameters'
	{ after(grammarAccess.getCitModelAccess().getParametersKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__4__Impl
	rule__CitModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getCitModelAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__5__Impl
	rule__CitModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCitModelAccess().getParametersAssignment_5()); }
		(rule__CitModel__ParametersAssignment_5)
		{ after(grammarAccess.getCitModelAccess().getParametersAssignment_5()); }
	)
	(
		{ before(grammarAccess.getCitModelAccess().getParametersAssignment_5()); }
		(rule__CitModel__ParametersAssignment_5)*
		{ after(grammarAccess.getCitModelAccess().getParametersAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getGroup_6()); }
	(rule__CitModel__Group_6__0)?
	{ after(grammarAccess.getCitModelAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group_6__0__Impl
	rule__CitModel__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getConstraintsKeyword_6_0()); }
	'Constraints'
	{ after(grammarAccess.getCitModelAccess().getConstraintsKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group_6__1__Impl
	rule__CitModel__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCitModelAccess().getColonKeyword_6_1()); }
	':'
	{ after(grammarAccess.getCitModelAccess().getColonKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CitModel__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCitModelAccess().getConstraintsAssignment_6_2()); }
		(rule__CitModel__ConstraintsAssignment_6_2)
		{ after(grammarAccess.getCitModelAccess().getConstraintsAssignment_6_2()); }
	)
	(
		{ before(grammarAccess.getCitModelAccess().getConstraintsAssignment_6_2()); }
		(rule__CitModel__ConstraintsAssignment_6_2)*
		{ after(grammarAccess.getCitModelAccess().getConstraintsAssignment_6_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getAlternatives_0()); }
	(rule__Parameter__Alternatives_0)
	{ after(grammarAccess.getParameterAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getSemicolonKeyword_1()); }
	(';')?
	{ after(grammarAccess.getParameterAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__0__Impl
	rule__Bool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getNameAssignment_0()); }
	(rule__Bool__NameAssignment_0)
	{ after(grammarAccess.getBoolAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__1__Impl
	rule__Bool__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getBoolAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getAlternatives_2()); }
	(rule__Bool__Alternatives_2)
	{ after(grammarAccess.getBoolAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_1__0__Impl
	rule__Bool__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_1_0()); }
	'{'
	{ after(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_1__1__Impl
	rule__Bool__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getTRUEKeyword_2_1_1()); }
	'TRUE'
	{ after(grammarAccess.getBoolAccess().getTRUEKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_1__2__Impl
	rule__Bool__Group_2_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getCommaKeyword_2_1_2()); }
	(',')?
	{ after(grammarAccess.getBoolAccess().getCommaKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_1__3__Impl
	rule__Bool__Group_2_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getFALSEKeyword_2_1_3()); }
	'FALSE'
	{ after(grammarAccess.getBoolAccess().getFALSEKeyword_2_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_1_4()); }
	'}'
	{ after(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_2__0__Impl
	rule__Bool__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_2_0()); }
	'{'
	{ after(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_2__1__Impl
	rule__Bool__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getFALSEKeyword_2_2_1()); }
	'FALSE'
	{ after(grammarAccess.getBoolAccess().getFALSEKeyword_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_2__2__Impl
	rule__Bool__Group_2_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getCommaKeyword_2_2_2()); }
	(',')?
	{ after(grammarAccess.getBoolAccess().getCommaKeyword_2_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_2__3__Impl
	rule__Bool__Group_2_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getTRUEKeyword_2_2_3()); }
	'TRUE'
	{ after(grammarAccess.getBoolAccess().getTRUEKeyword_2_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_2_4()); }
	'}'
	{ after(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_2_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_3__0__Impl
	rule__Bool__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_3_0()); }
	'{'
	{ after(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_3__1__Impl
	rule__Bool__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getTrueKeyword_2_3_1()); }
	'true'
	{ after(grammarAccess.getBoolAccess().getTrueKeyword_2_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_3__2__Impl
	rule__Bool__Group_2_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getCommaKeyword_2_3_2()); }
	(',')?
	{ after(grammarAccess.getBoolAccess().getCommaKeyword_2_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_3__3__Impl
	rule__Bool__Group_2_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getFalseKeyword_2_3_3()); }
	'false'
	{ after(grammarAccess.getBoolAccess().getFalseKeyword_2_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_3_4()); }
	'}'
	{ after(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_2_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_4__0__Impl
	rule__Bool__Group_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_4_0()); }
	'{'
	{ after(grammarAccess.getBoolAccess().getLeftCurlyBracketKeyword_2_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_4__1__Impl
	rule__Bool__Group_2_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getFalseKeyword_2_4_1()); }
	'false'
	{ after(grammarAccess.getBoolAccess().getFalseKeyword_2_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_4__2__Impl
	rule__Bool__Group_2_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getCommaKeyword_2_4_2()); }
	(',')?
	{ after(grammarAccess.getBoolAccess().getCommaKeyword_2_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_4__3__Impl
	rule__Bool__Group_2_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getTrueKeyword_2_4_3()); }
	'true'
	{ after(grammarAccess.getBoolAccess().getTrueKeyword_2_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group_2_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_4_4()); }
	'}'
	{ after(grammarAccess.getBoolAccess().getRightCurlyBracketKeyword_2_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group__0__Impl
	rule__Enumerative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getNameAssignment_0()); }
	(rule__Enumerative__NameAssignment_0)
	{ after(grammarAccess.getEnumerativeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getGroup_1()); }
	(rule__Enumerative__Group_1__0)
	{ after(grammarAccess.getEnumerativeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1__0__Impl
	rule__Enumerative__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getEnumerativeAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1__1__Impl
	rule__Enumerative__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_1_1()); }
	'{'
	{ after(grammarAccess.getEnumerativeAccess().getLeftCurlyBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1__2__Impl
	rule__Enumerative__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_2()); }
	(rule__Enumerative__ElementsAssignment_1_2)
	{ after(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1__3__Impl
	rule__Enumerative__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getGroup_1_3()); }
	(rule__Enumerative__Group_1_3__0)*
	{ after(grammarAccess.getEnumerativeAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_1_4()); }
	'}'
	{ after(grammarAccess.getEnumerativeAccess().getRightCurlyBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumerative__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1_3__0__Impl
	rule__Enumerative__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getCommaKeyword_1_3_0()); }
	(',')?
	{ after(grammarAccess.getEnumerativeAccess().getCommaKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumerative__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_3_1()); }
	(rule__Enumerative__ElementsAssignment_1_3_1)
	{ after(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getNameAssignment_0()); }
	(rule__Range__NameAssignment_0)
	{ after(grammarAccess.getRangeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getRangeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__3__Impl
	rule__Range__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getBeginAssignment_3()); }
	(rule__Range__BeginAssignment_3)
	{ after(grammarAccess.getRangeAccess().getBeginAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__4__Impl
	rule__Range__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4()); }
	'..'
	{ after(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__5__Impl
	rule__Range__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getEndAssignment_5()); }
	(rule__Range__EndAssignment_5)
	{ after(grammarAccess.getRangeAccess().getEndAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__6__Impl
	rule__Range__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6()); }
	']'
	{ after(grammarAccess.getRangeAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getGroup_7()); }
	(rule__Range__Group_7__0)?
	{ after(grammarAccess.getRangeAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group_7__0__Impl
	rule__Range__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getStepKeyword_7_0()); }
	'step'
	{ after(grammarAccess.getRangeAccess().getStepKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getStepAssignment_7_1()); }
	(rule__Range__StepAssignment_7_1)
	{ after(grammarAccess.getRangeAccess().getStepAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getConstraintAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getImpliesExpressionParserRuleCall_1()); }
	ruleImpliesExpression
	{ after(grammarAccess.getConstraintAccess().getImpliesExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNumberSignKeyword_2()); }
	'#'
	{ after(grammarAccess.getConstraintAccess().getNumberSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
	{ after(grammarAccess.getImpliesExpressionAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
	(rule__ImpliesExpression__Group_1__0)*
	{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1()); }
	(rule__ImpliesExpression__OpAssignment_1_1)
	{ after(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
	(rule__ImpliesExpression__RightAssignment_1_2)
	{ after(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOR_OPERATORParserRuleCall_1_1()); }
	ruleOR_OPERATOR
	{ after(grammarAccess.getOrExpressionAccess().getOR_OPERATORParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0()); }
	ruleEqualExpression
	{ after(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAND_OPERATORParserRuleCall_1_1()); }
	ruleAND_OPERATOR
	{ after(grammarAccess.getAndExpressionAccess().getAND_OPERATORParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualExpression__Group__0__Impl
	rule__EqualExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
	{ after(grammarAccess.getEqualExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
	(rule__EqualExpression__Group_1__0)*
	{ after(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualExpression__Group_1__0__Impl
	rule__EqualExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualExpression__Group_1__1__Impl
	rule__EqualExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualExpressionAccess().getOpAssignment_1_1()); }
	(rule__EqualExpression__OpAssignment_1_1)
	{ after(grammarAccess.getEqualExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualExpressionAccess().getRightAssignment_1_2()); }
	(rule__EqualExpression__RightAssignment_1_2)
	{ after(grammarAccess.getEqualExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getPlusMinusParserRuleCall_0()); }
	rulePlusMinus
	{ after(grammarAccess.getRelationalExpressionAccess().getPlusMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
	(rule__RelationalExpression__Group_1__0)*
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
	(rule__RelationalExpression__OpAssignment_1_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
	(rule__RelationalExpression__RightAssignment_1_2)
	{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group__0__Impl
	rule__PlusMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0()); }
	ruleModMultDiv
	{ after(grammarAccess.getPlusMinusAccess().getModMultDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getGroup_1()); }
	(rule__PlusMinus__Group_1__0)*
	{ after(grammarAccess.getPlusMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__0__Impl
	rule__PlusMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusMinusAccess().getPlusMinusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__1__Impl
	rule__PlusMinus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1()); }
	(rule__PlusMinus__OpAssignment_1_1)
	{ after(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2()); }
	(rule__PlusMinus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModMultDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModMultDiv__Group__0__Impl
	rule__ModMultDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModMultDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getModMultDivAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModMultDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModMultDivAccess().getGroup_1()); }
	(rule__ModMultDiv__Group_1__0)*
	{ after(grammarAccess.getModMultDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModMultDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModMultDiv__Group_1__0__Impl
	rule__ModMultDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0()); }
	()
	{ after(grammarAccess.getModMultDivAccess().getModMultDivLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModMultDiv__Group_1__1__Impl
	rule__ModMultDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModMultDivAccess().getOpAssignment_1_1()); }
	(rule__ModMultDiv__OpAssignment_1_1)
	{ after(grammarAccess.getModMultDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModMultDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModMultDivAccess().getRightAssignment_1_2()); }
	(rule__ModMultDiv__RightAssignment_1_2)
	{ after(grammarAccess.getModMultDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getImpliesExpressionParserRuleCall_1_1()); }
	ruleImpliesExpression
	{ after(grammarAccess.getPrimaryAccess().getImpliesExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getNOT_OPERATORParserRuleCall_0()); }
	ruleNOT_OPERATOR
	{ after(grammarAccess.getNotExpressionAccess().getNOT_OPERATORParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group__1__Impl
	rule__NotExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1()); }
	rulePrimary
	{ after(grammarAccess.getNotExpressionAccess().getPrimaryParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2()); }
	()
	{ after(grammarAccess.getNotExpressionAccess().getNotExpressionPredicateAction_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementID__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementID__Group_3__0__Impl
	rule__ElementID__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementID__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementIDAccess().getHyphenMinusKeyword_3_0()); }
	('-')?
	{ after(grammarAccess.getElementIDAccess().getHyphenMinusKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementID__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementID__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementID__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementIDAccess().getINTTerminalRuleCall_3_1()); }
	RULE_INT
	{ after(grammarAccess.getElementIDAccess().getINTTerminalRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PossiblySignedNumber__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PossiblySignedNumber__Group__0__Impl
	rule__PossiblySignedNumber__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PossiblySignedNumber__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getPossiblySignedNumberAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PossiblySignedNumber__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PossiblySignedNumber__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PossiblySignedNumber__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getPossiblySignedNumberAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CitModel__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getCitModelAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__ParametersAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_5_0()); }
		ruleParameter
		{ after(grammarAccess.getCitModelAccess().getParametersParameterParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CitModel__ConstraintsAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCitModelAccess().getConstraintsConstraintParserRuleCall_6_2_0()); }
		ruleConstraint
		{ after(grammarAccess.getCitModelAccess().getConstraintsConstraintParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getBoolAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumerativeAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__ElementsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_2_0()); }
		ruleElement
		{ after(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerative__ElementsAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_3_1_0()); }
		ruleElement
		{ after(grammarAccess.getEnumerativeAccess().getElementsElementParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0()); }
		ruleelementID
		{ after(grammarAccess.getElementAccess().getNameElementIDParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRangeAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__BeginAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0()); }
		rulePossiblySignedNumber
		{ after(grammarAccess.getRangeAccess().getBeginPossiblySignedNumberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__EndAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0()); }
		rulePossiblySignedNumber
		{ after(grammarAccess.getRangeAccess().getEndPossiblySignedNumberParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__StepAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0()); }
		RULE_INT
		{ after(grammarAccess.getRangeAccess().getStepINTTerminalRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0()); }
		ruleImpliesOperator
		{ after(grammarAccess.getImpliesExpressionAccess().getOpImpliesOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
		ruleOrExpression
		{ after(grammarAccess.getImpliesExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightEqualExpressionParserRuleCall_1_2_0()); }
		ruleEqualExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightEqualExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualExpressionAccess().getOpEqualityOperatorsEnumRuleCall_1_1_0()); }
		ruleEqualityOperators
		{ after(grammarAccess.getEqualExpressionAccess().getOpEqualityOperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getEqualExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_1_1_0()); }
		ruleRelationalOperators
		{ after(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_1_2_0()); }
		rulePlusMinus
		{ after(grammarAccess.getRelationalExpressionAccess().getRightPlusMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0()); }
		rulePlusMinusOperators
		{ after(grammarAccess.getPlusMinusAccess().getOpPlusMinusOperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0()); }
		ruleModMultDiv
		{ after(grammarAccess.getPlusMinusAccess().getRightModMultDivParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0()); }
		ruleModMultDivOperators
		{ after(grammarAccess.getModMultDivAccess().getOpModMultDivOperatorsEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModMultDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModMultDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getModMultDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicPredicate__BoolConstAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicPredicateAccess().getBoolConstBoolConstParserRuleCall_0_0()); }
		ruleBoolConst
		{ after(grammarAccess.getAtomicPredicateAccess().getBoolConstBoolConstParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicPredicate__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicPredicateAccess().getNameElementIDParserRuleCall_1_0()); }
		ruleelementID
		{ after(grammarAccess.getAtomicPredicateAccess().getNameElementIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NUMID : ('0'..'9')+ RULE_ID;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
