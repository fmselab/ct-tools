/*
 * generated by Xtext 2.34.0
 */
package ctwedge.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import ctwedge.ide.contentassist.antlr.internal.InternalCTWedgeParser;
import ctwedge.services.CTWedgeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CTWedgeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CTWedgeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CTWedgeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getParameterAccess().getAlternatives_0(), "rule__Parameter__Alternatives_0");
			builder.put(grammarAccess.getBoolAccess().getAlternatives_2(), "rule__Bool__Alternatives_2");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getAtomicPredicateAccess().getAlternatives(), "rule__AtomicPredicate__Alternatives");
			builder.put(grammarAccess.getOR_OPERATORAccess().getAlternatives(), "rule__OR_OPERATOR__Alternatives");
			builder.put(grammarAccess.getAND_OPERATORAccess().getAlternatives(), "rule__AND_OPERATOR__Alternatives");
			builder.put(grammarAccess.getNOT_OPERATORAccess().getAlternatives(), "rule__NOT_OPERATOR__Alternatives");
			builder.put(grammarAccess.getBoolConstAccess().getAlternatives(), "rule__BoolConst__Alternatives");
			builder.put(grammarAccess.getElementIDAccess().getAlternatives(), "rule__ElementID__Alternatives");
			builder.put(grammarAccess.getRelationalOperatorsAccess().getAlternatives(), "rule__RelationalOperators__Alternatives");
			builder.put(grammarAccess.getEqualityOperatorsAccess().getAlternatives(), "rule__EqualityOperators__Alternatives");
			builder.put(grammarAccess.getPlusMinusOperatorsAccess().getAlternatives(), "rule__PlusMinusOperators__Alternatives");
			builder.put(grammarAccess.getModMultDivOperatorsAccess().getAlternatives(), "rule__ModMultDivOperators__Alternatives");
			builder.put(grammarAccess.getImpliesOperatorAccess().getAlternatives(), "rule__ImpliesOperator__Alternatives");
			builder.put(grammarAccess.getCitModelAccess().getGroup(), "rule__CitModel__Group__0");
			builder.put(grammarAccess.getCitModelAccess().getGroup_6(), "rule__CitModel__Group_6__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getBoolAccess().getGroup(), "rule__Bool__Group__0");
			builder.put(grammarAccess.getBoolAccess().getGroup_2_1(), "rule__Bool__Group_2_1__0");
			builder.put(grammarAccess.getBoolAccess().getGroup_2_2(), "rule__Bool__Group_2_2__0");
			builder.put(grammarAccess.getBoolAccess().getGroup_2_3(), "rule__Bool__Group_2_3__0");
			builder.put(grammarAccess.getBoolAccess().getGroup_2_4(), "rule__Bool__Group_2_4__0");
			builder.put(grammarAccess.getEnumerativeAccess().getGroup(), "rule__Enumerative__Group__0");
			builder.put(grammarAccess.getEnumerativeAccess().getGroup_1(), "rule__Enumerative__Group_1__0");
			builder.put(grammarAccess.getEnumerativeAccess().getGroup_1_3(), "rule__Enumerative__Group_1_3__0");
			builder.put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
			builder.put(grammarAccess.getRangeAccess().getGroup_7(), "rule__Range__Group_7__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getEqualExpressionAccess().getGroup(), "rule__EqualExpression__Group__0");
			builder.put(grammarAccess.getEqualExpressionAccess().getGroup_1(), "rule__EqualExpression__Group_1__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1(), "rule__PlusMinus__Group_1__0");
			builder.put(grammarAccess.getModMultDivAccess().getGroup(), "rule__ModMultDiv__Group__0");
			builder.put(grammarAccess.getModMultDivAccess().getGroup_1(), "rule__ModMultDiv__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
			builder.put(grammarAccess.getElementIDAccess().getGroup_3(), "rule__ElementID__Group_3__0");
			builder.put(grammarAccess.getPossiblySignedNumberAccess().getGroup(), "rule__PossiblySignedNumber__Group__0");
			builder.put(grammarAccess.getCitModelAccess().getNameAssignment_2(), "rule__CitModel__NameAssignment_2");
			builder.put(grammarAccess.getCitModelAccess().getParametersAssignment_5(), "rule__CitModel__ParametersAssignment_5");
			builder.put(grammarAccess.getCitModelAccess().getConstraintsAssignment_6_2(), "rule__CitModel__ConstraintsAssignment_6_2");
			builder.put(grammarAccess.getBoolAccess().getNameAssignment_0(), "rule__Bool__NameAssignment_0");
			builder.put(grammarAccess.getEnumerativeAccess().getNameAssignment_0(), "rule__Enumerative__NameAssignment_0");
			builder.put(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_2(), "rule__Enumerative__ElementsAssignment_1_2");
			builder.put(grammarAccess.getEnumerativeAccess().getElementsAssignment_1_3_1(), "rule__Enumerative__ElementsAssignment_1_3_1");
			builder.put(grammarAccess.getElementAccess().getNameAssignment(), "rule__Element__NameAssignment");
			builder.put(grammarAccess.getRangeAccess().getNameAssignment_0(), "rule__Range__NameAssignment_0");
			builder.put(grammarAccess.getRangeAccess().getBeginAssignment_3(), "rule__Range__BeginAssignment_3");
			builder.put(grammarAccess.getRangeAccess().getEndAssignment_5(), "rule__Range__EndAssignment_5");
			builder.put(grammarAccess.getRangeAccess().getStepAssignment_7_1(), "rule__Range__StepAssignment_7_1");
			builder.put(grammarAccess.getImpliesExpressionAccess().getOpAssignment_1_1(), "rule__ImpliesExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2(), "rule__ImpliesExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualExpressionAccess().getOpAssignment_1_1(), "rule__EqualExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualExpressionAccess().getRightAssignment_1_2(), "rule__EqualExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1(), "rule__RelationalExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2(), "rule__RelationalExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusMinusAccess().getOpAssignment_1_1(), "rule__PlusMinus__OpAssignment_1_1");
			builder.put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_2(), "rule__PlusMinus__RightAssignment_1_2");
			builder.put(grammarAccess.getModMultDivAccess().getOpAssignment_1_1(), "rule__ModMultDiv__OpAssignment_1_1");
			builder.put(grammarAccess.getModMultDivAccess().getRightAssignment_1_2(), "rule__ModMultDiv__RightAssignment_1_2");
			builder.put(grammarAccess.getAtomicPredicateAccess().getBoolConstAssignment_0(), "rule__AtomicPredicate__BoolConstAssignment_0");
			builder.put(grammarAccess.getAtomicPredicateAccess().getNameAssignment_1(), "rule__AtomicPredicate__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CTWedgeGrammarAccess grammarAccess;

	@Override
	protected InternalCTWedgeParser createParser() {
		InternalCTWedgeParser result = new InternalCTWedgeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CTWedgeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CTWedgeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
